<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.bastanchu</groupId>
		<artifactId>churiservices</artifactId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>..</relativePath> <!-- lookup parent from repository -->
	</parent>
	<groupId>org.bastanchu.churiservices</groupId>
	<artifactId>orders</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>orders</name>
	<description>Orders microservice for churiservices</description>
	<properties>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<maven.compiler.compilerVersion>21</maven.compiler.compilerVersion>
		<java.version>21</java.version>
		<kotlin.version>2.1.0</kotlin.version>
		<spring.boot.version>3.2.0</spring.boot.version>
		<!--native-build-tools-plugin.version>0.9.23</native-build-tools-plugin.version-->
		<native.maven.plugin.version>0.9.23</native.maven.plugin.version>
		<skip.integration.tests>true</skip.integration.tests>
		<module.mainClass>org.bastanchu.churiservices.orders.OrdersApplicationKt</module.mainClass>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.bastanchu.churiservices</groupId>
			<artifactId>core</artifactId>
			<version>1.0-SNAPSHOT</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.bastanchu.churiservices</groupId>
			<artifactId>coretest</artifactId>
			<version>1.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<version>${spring.boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>${spring.boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring.boot.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
			<version>${spring.boot.version}</version>
		</dependency-->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.4.14</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.7.0</version>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>10.3.0</version>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
			<version>10.3.0</version>
		</dependency>
	</dependencies>

	<build>

		<!--To inject maven properties into spring application.yml -->
		<resources>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
				<includes>
					<include>**</include>
				</includes>
			</resource>
		</resources>
		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring.boot.version}</version>
				<configuration>
					<mainClass>${module.mainClass}</mainClass>
					<!--executable>true</executable-->
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<classifier>exec</classifier>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<version>${kotlin.version}</version>
				<extensions>true</extensions> <!-- You can set this option
            to automatically take information about lifecycles -->
				<executions>
					<execution>
						<id>compile</id>
						<goals>
							<goal>compile</goal> <!-- You can skip the <goals> element
                        if you enable extensions for the plugin -->
						</goals>
						<configuration>
							<sourceDirs>
								<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
								<!--sourceDir>${project.basedir}/src/main/java</sourceDir-->
							</sourceDirs>
						</configuration>
					</execution>
					<execution>
						<id>test-compile</id>
						<goals>
							<goal>test-compile</goal> <!-- You can skip the <goals> element
                    if you enable extensions for the plugin -->
						</goals>
						<configuration>
							<sourceDirs>
								<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
								<!--sourceDir>${project.basedir}/src/test/java</sourceDir-->
							</sourceDirs>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<args>
						<arg>-Xjsr305=strict </arg>
						<arg>-jvm-target=21</arg>
					</args>
					<compilerPlugins>
						<plugin>spring</plugin>
					</compilerPlugins>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-allopen</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- To perform integration tests -->
			<!-- mvn clean integration-test -Dskip.integration.tests=false-->
			<!-- To perform integration tests with full jacoco coverage -->
			<!-- mvn clean integration-test verify site -Dskip.integration.tests=false -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>add-integration-test-resources</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<filtering>true</filtering>
									<directory>${project.basedir}/src/test/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.0.0-M5</version>
				<configuration>
					<argLine>${failsafe.jacoco.args}</argLine>
				</configuration>
				<!--configuration>
                    <additionalClasspathElements>${project.basedir}/src/main/kotlin</additionalClasspathElements>
                    <additionalClasspathElements>${project.basedir}/src/main/resources</additionalClasspathElements>
                </configuration-->
				<executions>
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!--additionalClasspathElements>${project.basedir}/target/classes</additionalClasspathElements>
                            <additionalClasspathElements>${project.basedir}/src/main/resources</additionalClasspathElements-->
							<failIfNoTests>true</failIfNoTests>
							<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
							<includes>
								<include>**/*ITCase.*</include>
							</includes>
							<skipTests>${skip.integration.tests}</skipTests>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- JACOCO Configuration -->
			<!-- https://natritmeyer.com/howto/reporting-aggregated-unit-and-integration-test-coverage-with-jacoco/ -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.7.1</version>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.10</version>
				<executions>
					<execution>
						<id>before-unit-test-execution</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</destFile>
							<propertyName>surefire.jacoco.args</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>after-unit-test-execution</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-unit-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>before-integration-test-execution</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</destFile>
							<propertyName>failsafe.jacoco.args</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>after-integration-test-execution</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-integration-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>merge-unit-and-integration</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>merge</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}/jacoco-output/</directory>
									<includes>
										<include>*.exec</include>
									</includes>
								</fileSet>
							</fileSets>
							<destFile>${project.build.directory}/jacoco-output/merged.exec</destFile>
						</configuration>
					</execution>
					<execution>
						<id>create-merged-report</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>	
</project>
