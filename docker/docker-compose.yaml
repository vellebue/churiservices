version: '3'
services:
  #--CHURISERVICES--
  #ORDERS
  churiservices-orders-db:
    image: postgres:latest
    volumes:
      - churiservices-orders-db-volume:/var/lib/postgresql/data
    ports:
      - 6960:5432
    expose:
      - "5432"
    environment:
      POSTGRES_DB: churiservices_orders
      POSTGRES_USER: churiservices_orders
      POSTGRES_PASSWORD: angel7
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - churisevices-net
  #ARTICLES
  churiservices-articles-db:
    image: postgres:latest
    volumes:
      - churiservices-articles-db-volume:/var/lib/postgresql/data
    ports:
      - 6961:5432
    expose:
      - "5432"
    environment:
      POSTGRES_DB: churiservices_articles
      POSTGRES_USER: churiservices_articles
      POSTGRES_PASSWORD: angel7
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - churisevices-net
 # churiservices-articles:
 #   image: articles:1.0-SNAPSHOT
 #   ports:
 #     - 7081:7081
 #   expose:
 #     - "7081"
 #   networks:
 #     - churisevices-net
  #--SYSTEM--
  #KEYCLOAK
  churiservices-system-keycloak-db:
    image: postgres:latest
    volumes:
      - churiservices-system-keycloak-db-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - churisevices-net
  churiservices-system-keycloak:
    image: bitnami/keycloak:latest
    environment:
      KEYCLOAK_DATABASE_VENDOR: postgresql
      KEYCLOAK_DATABASE_HOST: churiservices-system-keycloak-db
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: keycloak
      KEYCLOAK_DATABASE_SCHEMA: public
      KEYCLOAK_DATABASE_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: Pa55w0rd
      KC_HTTP_RELATIVE_PATH: /auth
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - 8000:8080
    expose:
      - "8080"
    depends_on:
      - churiservices-system-keycloak-db
    networks:
      - churisevices-net
  #CONSUL
# churiservices-system-consul:
#   image: hashicorp/consul:1.18
#   ports:
#     - 8500:8500
#   expose:
#     - "8500"
#   networks:
#     - churisevices-net
  #GRAFANA LOKI
  loki:
    image: grafana/loki:2.9.2
    user: "1000"
    volumes:
      - ./Loki/loki-config.yaml:/etc/loki/local-config.yaml
      - ../tmp/loki:/tmp/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - churisevices-net
  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:10.1.10-ubuntu
    ports:
      - "3000:3000"
    networks:
      - churisevices-net
volumes:
  churiservices-orders-db-volume:
  churiservices-articles-db-volume:
  churiservices-system-keycloak-db-volume:
networks:
  churisevices-net:
    driver: bridge
#Execute these steps in the same directory where docker-compose.yaml is
#Step 1 verification
#docker compose config
#Step 2
#docker compose build
#Step 3 to run
#docker compose up -d
#Step 4 to stop
#docker compose down
